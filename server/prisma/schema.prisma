generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  publicId        String          @default(uuid()) @unique
  email           String          @unique
  name            String
  password        String
  description     String?
  icon            String?

  ownedGuilds     Guild[]
  joinedGuilds    UserOnGuild[]
  directChannels  UserOnDirectChannel[]

  directMessages  DirectMessage[]
  guildMessages   GuildMessage[]
}

// GUILD

model Guild {
  id            Int             @id @default(autoincrement())
  publicId      String          @default(uuid()) @unique
  name          String
  icon          String?
  banner        String?  
  ownerId       Int

  owner         User            @relation(fields: [ownerId], references: [id])
  members       UserOnGuild[]
  channels      GuildChannel[]
}

model UserOnGuild {
  userId        Int
  guildId       Int
  role          String?         // admin, member, etc. To be added...

  user          User            @relation(fields: [userId], references: [id])
  guild         Guild           @relation(fields: [guildId], references: [id])

  @@id([userId, guildId])
}

model GuildChannel {
  id            Int             @id @default(autoincrement())
  publicId      String          @default(uuid()) @unique
  name          String

  guildId       Int
  guild         Guild           @relation(fields: [guildId], references: [id])

  messages      GuildMessage[]
}

model GuildMessage {
  id            Int             @id @default(autoincrement())
  content       String
  createdAt     DateTime        @default(now())

  senderId      Int
  channelId     Int

  sender        User            @relation(fields: [senderId], references: [id])
  channel       GuildChannel    @relation(fields: [channelId], references: [id])
}

// END GUILD

// DIRECT

model DirectChannel {
  id        Int                   @id @default(autoincrement())
  publicId  String                @default(uuid()) @unique
  users     UserOnDirectChannel[]
  messages  DirectMessage[]
}

model UserOnDirectChannel {
  userId          Int
  directChannelId Int

  user        User                  @relation(fields: [userId], references: [id])
  channel     DirectChannel         @relation(fields: [directChannelId], references: [id])

  @@id([userId, directChannelId])
}

model DirectMessage {
  id                Int                 @id @default(autoincrement())
  content           String
  createdAt         DateTime            @default(now())
  senderId          Int
  directChannelId   Int

  sender            User                @relation(fields: [senderId], references: [id])
  directChannel     DirectChannel       @relation(fields: [directChannelId], references: [id])
}

// END DIRECT